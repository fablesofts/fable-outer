<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security-3.1.xsd">

	<!--例外添加 -->
	<http pattern="/style/**" security="none" />
	<http pattern="/easyui/**" security="none" />
	<http pattern="/framelayout/**" security="none" />
	<http pattern="/login*" security="none" />
	<http pattern="/js/**" security="none" /> 
	<!--验证码页面  -->
	<http pattern="/commons/checkCode.jsp" security="none" />
	<!--拒绝访问页面  -->
	<http pattern="/root.jsp" security="none" />
	<!-- 页面加载时间过长页面 -->
	<http pattern="/timeout.jsp" security="none" />
	<!-- 系统授权 -->
	<http pattern="/sysauth/**" security="none" />
	<!-- 系统控制器,菜单初始化资源(不用为每个角色都添加一次) -->
	<http pattern="/system/**" security="none" />
	<!-- 欢迎页面 -->
	<http pattern="/welcome.jsp" security="none" />
	<http pattern="/main.jsp" security="none" />


	<http use-expressions="true" entry-point-ref="authenticationProcessingFilterEntryPoint"
		access-denied-page="/root.jsp"><!-- 当访问被拒绝时，会转到/root.jsp -->
		<!-- 实现免登陆验证 -->
		<!-- <remember-me /> -->
		<!-- 退出时把cookies中的以下几个变量删除,其中后两个为菜单相关的数  -->
 		<logout delete-cookies="JSESSIONID,selectMenu,systemMenus" logout-success-url="/login.jsp" invalidate-session="true" logout-url="/fableLogout"/>
 		<!-- id登陆唯一. 后登陆的账号会挤掉第一次登陆的账号 -->
		<session-management session-authentication-strategy-ref="sas"/>
		<custom-filter ref="loginFilter" position="FORM_LOGIN_FILTER" />
		<custom-filter ref="concurrencyFilter" position="CONCURRENT_SESSION_FILTER"/> 
		<custom-filter ref="securityFilter" before="FILTER_SECURITY_INTERCEPTOR" />
	</http>

	<!-- 实现了UserDetailsService的Bean -->
	<authentication-manager alias="fableAuthenticationManager">
		<authentication-provider user-service-ref="userInfoService" />
	</authentication-manager>

	<!-- 登录验证器 -->
	<beans:bean id="loginFilter"
		class="com.fable.outer.security.FableUsernamePasswordAuthenticationFilter">
		<!-- 处理登录 -->
		<beans:property name="filterProcessesUrl" value="/fable_security" />
		<beans:property name="authenticationSuccessHandler" ref="loginLogAuthenticationSuccessHandler" />
		<beans:property name="authenticationFailureHandler" ref="simpleUrlAuthenticationFailureHandler" />
		<beans:property name="authenticationManager" ref="fableAuthenticationManager" />
		<beans:property name="sessionAuthenticationStrategy" ref="sas"></beans:property> 
	</beans:bean>

	<!-- 认证过滤器 -->
	<!--调用顺序为：AbstractSecurityInterceptor调用SecurityMetadataSource取得资源的所有可访问权限，然后再调用AccessDecisionManager来实现决策，确定用户是否有权限访问该资源。 -->
	<beans:bean id="securityFilter" class="com.fable.outer.security.FableSecurityFilter">
		<!-- 用户拥有的权限 -->
		<beans:property name="authenticationManager" ref="fableAuthenticationManager" />
		<!-- 用户是否拥有所请求资源的权限 访问决策器 -->
		<beans:property name="accessDecisionManager" ref="fableAccessDecisionManager" />
		<!-- 资源与权限对应关系 资源权限获取器 -->
		<beans:property name="securityMetadataSource" ref="fableSecurityMetadataSource" />
	</beans:bean>

	<!--认证成功处理器 -->
	<beans:bean id="loginLogAuthenticationSuccessHandler"
		class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
		<beans:property name="defaultTargetUrl" value="/welcome.jsp"></beans:property>
	</beans:bean>
	<!--认证失败处理器 -->
	<beans:bean id="simpleUrlAuthenticationFailureHandler"
		class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
		<beans:property name="defaultFailureUrl" value="/login.jsp"></beans:property>
	</beans:bean>

	<!-- 未登录的切入点 -->
	<beans:bean id="authenticationProcessingFilterEntryPoint"
		class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<beans:property name="loginFormUrl" value="/login.jsp"></beans:property>
	</beans:bean>
	<!-- ConcurrentSessionFilter过滤器配置(主要设置账户session过期路径) -->
	<beans:bean id="concurrencyFilter"
		class="org.springframework.security.web.session.ConcurrentSessionFilter">
		<beans:property name="expiredUrl" value="/login.jsp"></beans:property>
		<beans:property name="sessionRegistry" ref="sessionRegistry"></beans:property>
	</beans:bean>

	<!-- 注入到UsernamePasswordAuthenticationFilter中，否则默认使用的是NullAuthenticatedSessionStrategy，则获取不到登录用户数 
		error-if-maximum-exceeded：若当前maximumSessions为1，当设置为true表示同一账户登录会抛出SessionAuthenticationException异常， 
		异常信息为：Maximum sessions of {0} for this principal exceeded; 当设置为false时，不会报错，则会让同一账户最先认证的session过期。 
		具体参考：ConcurrentSessionControlStrategy:onAuthentication() -->
	<beans:bean id="sas" class="org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy">
		<beans:property name="maximumSessions" value="1"></beans:property>
		<beans:property name="exceptionIfMaximumExceeded" value="false"></beans:property>
		<beans:constructor-arg name="sessionRegistry" ref="sessionRegistry"></beans:constructor-arg>
	</beans:bean>
	<beans:bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl"></beans:bean>

</beans:beans>